
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ARR_CALL ASSIGN BACK BOOL_ARR BOOL_VAR DASH DECR EQ FALSE FORWARD GOTO INCR INT INT_ARR INT_VAR LABEL LBRACE LBRACKET LEFT LINK LINK_BREAK LPAREN NL NOR PASS PROC_ARR PROC_VAR RBRACE RBRACKET RIGHT RPAREN TP TRUE VAR_CALLprogram : statement_block NL\n                   | statement_block\n        program : error NL\n                   | error\n                   | statement_block error\n                   | statement_block error NL\n        statement_block : statement_block statement\n                           | statement\n        statement_block : error\n        statement : declaration NL\n                     | assignment NL\n                     | arithmetic NL\n                     | logics NL\n                     | comparison NL\n                     | cycle NL\n                     | conditionals NL\n                     | pass NL\n                     | identification NL\n                     | robot NL\n                     | empty\n                     | LPAREN statement RPAREN NL\n        statement : error\n                     | LPAREN error RPAREN NL\n        variable : INT_VARvariable : BOOL_VARvariable : int_arr_var\n                    | bool_arr_var\n        procedure : PROC_VARprocedure : proc_arr_varlabel : LABELliteral : LPAREN INT RPAREN\n                   | INT\n                   | TRUE\n                   | FALSE\n        var_call_id : VAR_CALLarr_call_id : ARR_CALL LBRACKET id_list RBRACKETcall : arr_call_id\n                | var_call_id\n        int_arr_var : INT_ARR LBRACKET id_list RBRACKETbool_arr_var : BOOL_ARR LBRACKET id_list RBRACKETproc_arr_var : PROC_ARR LBRACKET id_list RBRACKETid_list : id_list id\n                   | id\n        id : INTid : calldeclaration : label\n                       | declaration_set\n        declaration : errordeclaration_set : variable\n                           | procedure\n        assignment : declaration ASSIGN literal\n                      | declaration ASSIGN call\n\n                      | call ASSIGN call\n                      | call ASSIGN literal\n\n                      | declaration ASSIGN logics\n                      | declaration ASSIGN comparison\n                      | declaration ASSIGN identification\n                      | declaration ASSIGN robot\n\n                      | call ASSIGN logics\n                      | call ASSIGN comparison\n                      | call ASSIGN identification\n                      | call ASSIGN robot\n\n                      | call ASSIGN LBRACE NL statement_block RBRACE\n        assignment : error ASSIGN call\n                      | error ASSIGN literal\n                      | declaration ASSIGN error\n\n                      | call ASSIGN error\n\n                      | error ASSIGN logics\n                      | error ASSIGN comparison\n                      | error ASSIGN identification\n                      | error ASSIGN robot\n\n                      | error ASSIGN LBRACE statement_block RBRACE\n                      | call ASSIGN LBRACE error RBRACE\n        arithmetic : INCR\n                      | DECR\n        arithmetic : errorlog_type : TRUE\n                    | FALSE\n                    | call\n        logic_expr : logic_expr DASH log_type\n                      | log_type\n        logics : NOR logic_expr\n        logics : NOR errorcomparison : arithmetic EQ INT\n                      | arithmetic EQ var_call_id\n\n                      | var_call_id EQ var_call_id\n                      | var_call_id EQ INT\n                      | arr_call_id EQ INT\n\n                      | var_call_id EQ TRUE\n                      | var_call_id EQ FALSE\n                      | arr_call_id EQ TRUE\n                      | arr_call_id EQ FALSE\n\n                      | logics EQ TRUE\n                      | logics EQ FALSE\n                      | log_type EQ TRUE\n                      | log_type EQ FALSE\n\n                      | var_call_id EQ PASS\n                      | arr_call_id EQ PASS\n\n                      | literal EQ literal\n        comparison : error EQ INT\n                      | error EQ var_call_id\n                      | error EQ TRUE\n                      | error EQ FALSE\n                      | error EQ PASS\n\n                      | arithmetic EQ error\n                      | var_call_id EQ error\n                      | arr_call_id EQ error\n                      | logics EQ error\n                      | log_type EQ error\n\n                      | arithmetic EQ error conditionals\n                      | logics EQ error conditionals\n        cycle : LPAREN logics RPAREN LBRACE NL statement_block RBRACE\n                 | LPAREN logic_expr RPAREN LBRACE NL statement_block RBRACE\n        cycle : LPAREN error RPAREN LBRACE NL statement_block RBRACE\n                 | LPAREN logics RPAREN LBRACE NL error RBRACE\n                 | LPAREN logic_expr RPAREN LBRACE NL error RBRACE\n        conditionals : LBRACKET logics RBRACKET GOTO var_call_id\n                        | LBRACKET logic_expr RBRACKET GOTO var_call_id\n                        | LBRACKET logics RBRACKET var_call_id\n                        | LBRACKET logic_expr RBRACKET var_call_id\n                        | GOTO var_call_id\n                        | var_call_id\n        conditionals : LBRACKET error RBRACKET GOTO var_call_id\n                        | LBRACKET error RBRACKET var_call_id\n\n                        | LBRACKET logics RBRACKET GOTO error\n                        | LBRACKET logic_expr RBRACKET GOTO error\n                        | LBRACKET logics RBRACKET error\n                        | LBRACKET logic_expr RBRACKET error\n\n                        | GOTO error\n                        | error\n        pass : PASSidentification : call LINK var_call_id\n                          | call LINK_BREAK var_call_id\n        identification : error LINK var_call_id\n                          | error LINK_BREAK var_call_id\n\n                          | call LINK error\n                          | call LINK_BREAK error\n\n                          | identification error\n                          | literal LINK var_call_id\n                          | literal LINK_BREAK var_call_id\n        robot : FORWARD\n                 | BACK\n                 | RIGHT\n                 | LEFT\n                 | TP\n        empty : NL'
    
_lr_action_items = {'error':([0,2,3,4,5,14,16,17,24,32,33,42,53,54,55,57,61,62,63,64,65,66,67,68,69,70,71,72,73,74,84,85,86,95,96,97,113,115,127,128,133,138,141,151,152,157,159,161,162,163,164,179,180,189,190,196,197,202,204,207,217,219,220,221,222,229,230,231,232,233,],[4,54,-146,-9,-8,73,-20,76,88,100,102,-35,-146,-22,-7,108,-10,135,-11,-12,138,-13,141,-14,-15,-16,-17,-18,-138,-19,160,162,164,170,175,178,73,189,-134,-135,73,192,192,-139,-140,73,203,-132,-136,-133,-137,206,209,-9,217,-21,-23,189,225,227,-22,189,231,233,217,217,217,-9,217,-9,]),'LPAREN':([0,2,3,4,5,16,17,53,54,55,57,61,62,63,64,66,68,69,70,71,72,74,81,84,115,189,190,196,197,202,217,219,220,221,222,229,230,231,232,233,],[17,17,-146,-9,-8,-20,17,-146,-22,-7,118,-10,118,-11,-12,-13,-14,-15,-16,-17,-18,-19,118,118,17,-9,17,-21,-23,17,-22,17,17,17,17,17,17,-9,17,-9,]),'INCR':([0,2,3,4,5,16,17,53,54,55,57,61,62,63,64,66,68,69,70,71,72,74,84,115,189,190,196,197,202,217,219,220,221,222,229,230,231,232,233,],[22,22,-146,-9,-8,-20,22,-146,-22,-7,22,-10,22,-11,-12,-13,-14,-15,-16,-17,-18,-19,22,22,-9,22,-21,-23,22,-22,22,22,22,22,22,22,-9,22,-9,]),'DECR':([0,2,3,4,5,16,17,53,54,55,57,61,62,63,64,66,68,69,70,71,72,74,84,115,189,190,196,197,202,217,219,220,221,222,229,230,231,232,233,],[23,23,-146,-9,-8,-20,23,-146,-22,-7,23,-10,23,-11,-12,-13,-14,-15,-16,-17,-18,-19,23,23,-9,23,-21,-23,23,-22,23,23,23,23,23,23,-9,23,-9,]),'NOR':([0,2,3,4,5,16,17,32,53,54,55,57,61,62,63,64,66,68,69,70,71,72,74,84,115,189,190,196,197,202,217,219,220,221,222,229,230,231,232,233,],[24,24,-146,-9,-8,-20,24,24,-146,-22,-7,24,-10,24,-11,-12,-13,-14,-15,-16,-17,-18,-19,24,24,-9,24,-21,-23,24,-22,24,24,24,24,24,24,-9,24,-9,]),'LBRACKET':([0,2,3,4,5,16,17,43,50,51,52,53,54,55,61,63,64,66,68,69,70,71,72,74,115,138,141,189,190,196,197,202,217,219,220,221,222,229,230,231,232,233,],[32,32,-146,-9,-8,-20,32,103,104,105,106,-146,-22,-7,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,32,32,32,-9,32,-21,-23,32,-22,32,32,32,32,32,32,-9,32,-9,]),'GOTO':([0,2,3,4,5,16,17,53,54,55,61,63,64,66,68,69,70,71,72,74,115,138,141,179,180,181,189,190,196,197,202,217,219,220,221,222,229,230,231,232,233,],[33,33,-146,-9,-8,-20,33,-146,-22,-7,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,33,33,33,204,207,210,-9,33,-21,-23,33,-22,33,33,33,33,33,33,-9,33,-9,]),'PASS':([0,2,3,4,5,16,17,53,54,55,58,61,63,64,66,68,69,70,71,72,74,95,96,115,189,190,196,197,202,217,219,220,221,222,229,230,231,232,233,],[31,31,-146,-9,-8,-20,31,-146,-22,-7,126,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,169,174,31,-9,31,-21,-23,31,-22,31,31,31,31,31,31,-9,31,-9,]),'FORWARD':([0,2,3,4,5,16,17,53,54,55,57,61,62,63,64,66,68,69,70,71,72,74,84,115,189,190,196,197,202,217,219,220,221,222,229,230,231,232,233,],[34,34,-146,-9,-8,-20,34,-146,-22,-7,34,-10,34,-11,-12,-13,-14,-15,-16,-17,-18,-19,34,34,-9,34,-21,-23,34,-22,34,34,34,34,34,34,-9,34,-9,]),'BACK':([0,2,3,4,5,16,17,53,54,55,57,61,62,63,64,66,68,69,70,71,72,74,84,115,189,190,196,197,202,217,219,220,221,222,229,230,231,232,233,],[35,35,-146,-9,-8,-20,35,-146,-22,-7,35,-10,35,-11,-12,-13,-14,-15,-16,-17,-18,-19,35,35,-9,35,-21,-23,35,-22,35,35,35,35,35,35,-9,35,-9,]),'RIGHT':([0,2,3,4,5,16,17,53,54,55,57,61,62,63,64,66,68,69,70,71,72,74,84,115,189,190,196,197,202,217,219,220,221,222,229,230,231,232,233,],[36,36,-146,-9,-8,-20,36,-146,-22,-7,36,-10,36,-11,-12,-13,-14,-15,-16,-17,-18,-19,36,36,-9,36,-21,-23,36,-22,36,36,36,36,36,36,-9,36,-9,]),'LEFT':([0,2,3,4,5,16,17,53,54,55,57,61,62,63,64,66,68,69,70,71,72,74,84,115,189,190,196,197,202,217,219,220,221,222,229,230,231,232,233,],[37,37,-146,-9,-8,-20,37,-146,-22,-7,37,-10,37,-11,-12,-13,-14,-15,-16,-17,-18,-19,37,37,-9,37,-21,-23,37,-22,37,37,37,37,37,37,-9,37,-9,]),'TP':([0,2,3,4,5,16,17,53,54,55,57,61,62,63,64,66,68,69,70,71,72,74,84,115,189,190,196,197,202,217,219,220,221,222,229,230,231,232,233,],[38,38,-146,-9,-8,-20,38,-146,-22,-7,38,-10,38,-11,-12,-13,-14,-15,-16,-17,-18,-19,38,38,-9,38,-21,-23,38,-22,38,38,38,38,38,38,-9,38,-9,]),'NL':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,22,23,25,26,31,34,35,36,37,38,39,40,41,42,44,45,46,47,48,49,53,54,55,61,63,64,66,68,69,70,71,72,73,74,76,77,87,88,89,90,91,92,93,94,101,102,109,110,111,112,113,114,115,116,117,119,120,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,189,190,192,193,194,195,196,197,198,199,200,201,202,205,206,208,209,211,212,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,],[3,53,-146,56,-8,61,63,64,66,68,69,70,71,72,74,-20,3,-46,-47,-74,-75,-32,-122,-131,-141,-142,-143,-144,-145,-30,-49,-50,-35,-24,-25,-26,-27,-28,-29,-146,107,-7,-10,-11,-12,-13,-14,-15,-16,-17,-18,-138,-19,-48,66,-82,-83,-81,-77,-78,-79,-37,-38,-121,-129,-64,-65,-68,-69,-70,-71,3,-37,-38,-33,-34,-100,-101,-102,-103,-104,-134,-135,-51,-52,-55,-56,-57,-58,-66,-84,-85,-105,-93,-94,-108,196,197,-31,-99,-33,-34,-139,-140,-53,-54,-59,-60,-61,-62,202,-67,-132,-136,-133,-137,-86,-87,-89,-90,-97,-106,-88,-91,-92,-98,-107,-95,-96,-109,-9,3,-130,-110,-122,-111,-21,-23,219,220,221,-80,3,-119,-127,-120,-128,-124,-36,-39,-40,-41,-22,-72,3,3,3,3,-73,-117,-125,-118,-126,-123,3,3,-9,3,-9,-63,-114,-112,-115,-113,-116,]),'LABEL':([0,2,3,4,5,16,17,53,54,55,61,63,64,66,68,69,70,71,72,74,115,189,190,196,197,202,217,219,220,221,222,229,230,231,232,233,],[39,39,-146,-9,-8,-20,39,-146,-22,-7,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,39,-9,39,-21,-23,39,-22,39,39,39,39,39,39,-9,39,-9,]),'VAR_CALL':([0,2,3,4,5,16,17,24,32,33,42,53,54,55,57,58,59,60,61,62,63,64,65,66,68,69,70,71,72,74,82,83,84,85,86,93,94,95,103,104,105,106,115,138,141,146,179,180,181,182,183,184,185,186,187,188,189,190,196,197,202,204,207,210,212,213,217,219,220,221,222,229,230,231,232,233,],[42,42,-146,-9,-8,-20,42,42,42,42,-35,-146,-22,-7,42,42,42,42,-10,42,-11,-12,42,-13,-14,-15,-16,-17,-18,-19,42,42,42,42,42,-37,-38,42,42,42,42,42,42,42,42,42,42,42,42,42,-43,-44,-45,42,42,42,-9,42,-21,-23,42,42,42,42,-36,-42,-22,42,42,42,42,42,42,-9,42,-9,]),'ARR_CALL':([0,2,3,4,5,16,17,24,32,42,53,54,55,57,61,62,63,64,66,68,69,70,71,72,74,84,93,94,103,104,105,106,115,146,182,183,184,185,186,187,188,189,190,196,197,202,212,213,217,219,220,221,222,229,230,231,232,233,],[43,43,-146,-9,-8,-20,43,43,43,-35,-146,-22,-7,43,-10,43,-11,-12,-13,-14,-15,-16,-17,-18,-19,43,-37,-38,43,43,43,43,43,43,43,-43,-44,-45,43,43,43,-9,43,-21,-23,43,-36,-42,-22,43,43,43,43,43,43,-9,43,-9,]),'TRUE':([0,2,3,4,5,16,17,24,32,53,54,55,57,58,61,62,63,64,66,67,68,69,70,71,72,74,81,84,95,96,97,115,146,189,190,196,197,202,217,219,220,221,222,229,230,231,232,233,],[28,28,-146,-9,-8,-20,28,90,90,-146,-22,-7,119,124,-10,119,-11,-12,-13,139,-14,-15,-16,-17,-18,-19,149,119,167,172,176,28,90,-9,28,-21,-23,28,-22,28,28,28,28,28,28,-9,28,-9,]),'FALSE':([0,2,3,4,5,16,17,24,32,53,54,55,57,58,61,62,63,64,66,67,68,69,70,71,72,74,81,84,95,96,97,115,146,189,190,196,197,202,217,219,220,221,222,229,230,231,232,233,],[29,29,-146,-9,-8,-20,29,91,91,-146,-22,-7,120,125,-10,120,-11,-12,-13,140,-14,-15,-16,-17,-18,-19,150,120,168,173,177,29,91,-9,29,-21,-23,29,-22,29,29,29,29,29,29,-9,29,-9,]),'INT':([0,2,3,4,5,16,17,42,53,54,55,57,58,61,62,63,64,65,66,68,69,70,71,72,74,81,84,93,94,95,96,103,104,105,106,115,118,182,183,184,185,186,187,188,189,190,196,197,202,212,213,217,219,220,221,222,229,230,231,232,233,],[25,25,-146,-9,-8,-20,79,-35,-146,-22,-7,25,122,-10,25,-11,-12,136,-13,-14,-15,-16,-17,-18,-19,25,25,-37,-38,166,171,184,184,184,184,25,191,184,-43,-44,-45,184,184,184,-9,25,-21,-23,25,-36,-42,-22,25,25,25,25,25,25,-9,25,-9,]),'INT_VAR':([0,2,3,4,5,16,17,53,54,55,61,63,64,66,68,69,70,71,72,74,115,189,190,196,197,202,217,219,220,221,222,229,230,231,232,233,],[44,44,-146,-9,-8,-20,44,-146,-22,-7,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,44,-9,44,-21,-23,44,-22,44,44,44,44,44,44,-9,44,-9,]),'BOOL_VAR':([0,2,3,4,5,16,17,53,54,55,61,63,64,66,68,69,70,71,72,74,115,189,190,196,197,202,217,219,220,221,222,229,230,231,232,233,],[45,45,-146,-9,-8,-20,45,-146,-22,-7,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,45,-9,45,-21,-23,45,-22,45,45,45,45,45,45,-9,45,-9,]),'PROC_VAR':([0,2,3,4,5,16,17,53,54,55,61,63,64,66,68,69,70,71,72,74,115,189,190,196,197,202,217,219,220,221,222,229,230,231,232,233,],[48,48,-146,-9,-8,-20,48,-146,-22,-7,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,48,-9,48,-21,-23,48,-22,48,48,48,48,48,48,-9,48,-9,]),'INT_ARR':([0,2,3,4,5,16,17,53,54,55,61,63,64,66,68,69,70,71,72,74,115,189,190,196,197,202,217,219,220,221,222,229,230,231,232,233,],[50,50,-146,-9,-8,-20,50,-146,-22,-7,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,50,-9,50,-21,-23,50,-22,50,50,50,50,50,50,-9,50,-9,]),'BOOL_ARR':([0,2,3,4,5,16,17,53,54,55,61,63,64,66,68,69,70,71,72,74,115,189,190,196,197,202,217,219,220,221,222,229,230,231,232,233,],[51,51,-146,-9,-8,-20,51,-146,-22,-7,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,51,-9,51,-21,-23,51,-22,51,51,51,51,51,51,-9,51,-9,]),'PROC_ARR':([0,2,3,4,5,16,17,53,54,55,61,63,64,66,68,69,70,71,72,74,115,189,190,196,197,202,217,219,220,221,222,229,230,231,232,233,],[52,52,-146,-9,-8,-20,52,-146,-22,-7,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,52,-9,52,-21,-23,52,-22,52,52,52,52,52,52,-9,52,-9,]),'$end':([1,2,3,4,5,16,53,54,55,56,61,63,64,66,68,69,70,71,72,74,107,196,197,],[0,-2,-146,-4,-8,-20,-1,-5,-7,-3,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-6,-21,-23,]),'RPAREN':([3,16,21,26,27,28,29,42,61,63,64,66,68,69,70,71,72,74,75,76,77,78,79,80,87,88,89,90,91,92,93,94,191,196,197,201,212,],[-146,-20,-79,-38,-37,-77,-78,-35,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,142,143,144,145,147,-81,-82,-83,-81,-77,-78,-79,-37,-38,147,-21,-23,-80,-36,]),'RBRACE':([3,5,16,55,61,63,64,66,68,69,70,71,72,74,189,190,196,197,203,217,222,229,230,231,232,233,],[-146,-8,-20,-7,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-9,218,-21,-23,223,-22,234,235,236,237,238,239,]),'ASSIGN':([4,6,18,19,21,26,27,39,40,41,42,44,45,46,47,48,49,54,76,189,212,214,215,216,217,231,233,],[57,62,-46,-47,84,-38,-37,-30,-49,-50,-35,-24,-25,-26,-27,-28,-29,57,57,57,-36,-39,-40,-41,57,57,57,]),'EQ':([4,8,9,20,21,22,23,25,26,27,28,29,30,42,54,76,77,79,80,87,88,89,90,91,92,93,94,108,109,110,111,116,117,119,120,121,129,130,131,135,147,153,154,155,160,189,201,212,217,231,233,],[58,65,67,81,-79,-74,-75,-32,95,96,-33,-34,97,-35,58,58,67,-32,97,-82,-83,-81,-77,-78,-79,-37,-38,58,-79,81,67,96,95,-33,-34,65,81,-79,67,58,-31,-79,81,67,58,58,-80,-36,58,58,58,]),'LINK':([4,20,21,25,26,27,28,29,42,54,76,79,108,109,110,116,117,119,120,129,130,135,147,153,154,160,189,212,217,231,233,],[59,82,85,-32,-38,-37,-33,-34,-35,59,59,-32,59,85,82,-37,-38,-33,-34,82,85,59,-31,85,82,59,59,-36,59,59,59,]),'LINK_BREAK':([4,20,21,25,26,27,28,29,42,54,76,79,108,109,110,116,117,119,120,129,130,135,147,153,154,160,189,212,217,231,233,],[60,83,86,-32,-38,-37,-33,-34,-35,60,60,-32,60,86,83,-37,-38,-33,-34,83,86,60,-31,86,83,60,60,-36,60,60,60,]),'DASH':([21,26,27,28,29,42,78,80,87,89,90,91,92,93,94,99,201,212,],[-79,-38,-37,-77,-78,-35,146,-81,146,-81,-77,-78,-79,-37,-38,146,-80,-36,]),'RBRACKET':([42,87,88,89,90,91,92,93,94,98,99,100,182,183,184,185,186,187,188,201,212,213,],[-35,-82,-83,-81,-77,-78,-79,-37,-38,179,180,181,212,-43,-44,-45,214,215,216,-80,-36,-42,]),'LBRACE':([57,84,143,144,145,],[115,159,198,199,200,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statement_block':([0,115,202,219,220,221,],[2,190,222,229,230,232,]),'statement':([0,2,17,115,190,202,219,220,221,222,229,230,232,],[5,55,75,5,55,5,5,5,5,55,55,55,55,]),'declaration':([0,2,17,115,190,202,219,220,221,222,229,230,232,],[6,6,6,6,6,6,6,6,6,6,6,6,6,]),'assignment':([0,2,17,115,190,202,219,220,221,222,229,230,232,],[7,7,7,7,7,7,7,7,7,7,7,7,7,]),'arithmetic':([0,2,17,57,62,84,115,190,202,219,220,221,222,229,230,232,],[8,8,8,121,121,121,8,8,8,8,8,8,8,8,8,8,]),'logics':([0,2,17,32,57,62,84,115,190,202,219,220,221,222,229,230,232,],[9,9,77,98,111,131,155,9,9,9,9,9,9,9,9,9,9,]),'comparison':([0,2,17,57,62,84,115,190,202,219,220,221,222,229,230,232,],[10,10,10,112,132,156,10,10,10,10,10,10,10,10,10,10,]),'cycle':([0,2,17,115,190,202,219,220,221,222,229,230,232,],[11,11,11,11,11,11,11,11,11,11,11,11,11,]),'conditionals':([0,2,17,115,138,141,190,202,219,220,221,222,229,230,232,],[12,12,12,12,193,195,12,12,12,12,12,12,12,12,12,]),'pass':([0,2,17,115,190,202,219,220,221,222,229,230,232,],[13,13,13,13,13,13,13,13,13,13,13,13,13,]),'identification':([0,2,17,57,62,84,115,190,202,219,220,221,222,229,230,232,],[14,14,14,113,133,157,14,14,14,14,14,14,14,14,14,14,]),'robot':([0,2,17,57,62,84,115,190,202,219,220,221,222,229,230,232,],[15,15,15,114,134,158,15,15,15,15,15,15,15,15,15,15,]),'empty':([0,2,17,115,190,202,219,220,221,222,229,230,232,],[16,16,16,16,16,16,16,16,16,16,16,16,16,]),'label':([0,2,17,115,190,202,219,220,221,222,229,230,232,],[18,18,18,18,18,18,18,18,18,18,18,18,18,]),'declaration_set':([0,2,17,115,190,202,219,220,221,222,229,230,232,],[19,19,19,19,19,19,19,19,19,19,19,19,19,]),'literal':([0,2,17,57,62,81,84,115,190,202,219,220,221,222,229,230,232,],[20,20,20,110,129,148,154,20,20,20,20,20,20,20,20,20,20,]),'call':([0,2,17,24,32,57,62,84,103,104,105,106,115,146,182,186,187,188,190,202,219,220,221,222,229,230,232,],[21,21,21,92,92,109,130,153,185,185,185,185,21,92,185,185,185,185,21,21,21,21,21,21,21,21,21,]),'var_call_id':([0,2,17,24,32,33,57,58,59,60,62,65,82,83,84,85,86,95,103,104,105,106,115,138,141,146,179,180,181,182,186,187,188,190,202,204,207,210,219,220,221,222,229,230,232,],[26,26,26,94,94,101,117,123,127,128,117,137,151,152,117,161,163,165,94,94,94,94,26,194,194,94,205,208,211,94,94,94,94,26,26,224,226,228,26,26,26,26,26,26,26,]),'arr_call_id':([0,2,17,24,32,57,62,84,103,104,105,106,115,146,182,186,187,188,190,202,219,220,221,222,229,230,232,],[27,27,27,93,93,116,116,116,93,93,93,93,27,93,93,93,93,93,27,27,27,27,27,27,27,27,27,]),'log_type':([0,2,17,24,32,57,62,84,115,146,190,202,219,220,221,222,229,230,232,],[30,30,80,89,89,30,30,30,30,201,30,30,30,30,30,30,30,30,30,]),'variable':([0,2,17,115,190,202,219,220,221,222,229,230,232,],[40,40,40,40,40,40,40,40,40,40,40,40,40,]),'procedure':([0,2,17,115,190,202,219,220,221,222,229,230,232,],[41,41,41,41,41,41,41,41,41,41,41,41,41,]),'int_arr_var':([0,2,17,115,190,202,219,220,221,222,229,230,232,],[46,46,46,46,46,46,46,46,46,46,46,46,46,]),'bool_arr_var':([0,2,17,115,190,202,219,220,221,222,229,230,232,],[47,47,47,47,47,47,47,47,47,47,47,47,47,]),'proc_arr_var':([0,2,17,115,190,202,219,220,221,222,229,230,232,],[49,49,49,49,49,49,49,49,49,49,49,49,49,]),'logic_expr':([17,24,32,],[78,87,99,]),'id_list':([103,104,105,106,],[182,186,187,188,]),'id':([103,104,105,106,182,186,187,188,],[183,183,183,183,213,213,213,213,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_block NL','program',2,'p_program','Parser.py',31),
  ('program -> statement_block','program',1,'p_program','Parser.py',32),
  ('program -> error NL','program',2,'p_program_error','Parser.py',37),
  ('program -> error','program',1,'p_program_error','Parser.py',38),
  ('program -> statement_block error','program',2,'p_program_error','Parser.py',39),
  ('program -> statement_block error NL','program',3,'p_program_error','Parser.py',40),
  ('statement_block -> statement_block statement','statement_block',2,'p_statement_block','Parser.py',47),
  ('statement_block -> statement','statement_block',1,'p_statement_block','Parser.py',48),
  ('statement_block -> error','statement_block',1,'p_statement_block_error','Parser.py',56),
  ('statement -> declaration NL','statement',2,'p_statement','Parser.py',63),
  ('statement -> assignment NL','statement',2,'p_statement','Parser.py',64),
  ('statement -> arithmetic NL','statement',2,'p_statement','Parser.py',65),
  ('statement -> logics NL','statement',2,'p_statement','Parser.py',66),
  ('statement -> comparison NL','statement',2,'p_statement','Parser.py',67),
  ('statement -> cycle NL','statement',2,'p_statement','Parser.py',68),
  ('statement -> conditionals NL','statement',2,'p_statement','Parser.py',69),
  ('statement -> pass NL','statement',2,'p_statement','Parser.py',70),
  ('statement -> identification NL','statement',2,'p_statement','Parser.py',71),
  ('statement -> robot NL','statement',2,'p_statement','Parser.py',72),
  ('statement -> empty','statement',1,'p_statement','Parser.py',73),
  ('statement -> LPAREN statement RPAREN NL','statement',4,'p_statement','Parser.py',74),
  ('statement -> error','statement',1,'p_statement_error','Parser.py',82),
  ('statement -> LPAREN error RPAREN NL','statement',4,'p_statement_error','Parser.py',83),
  ('variable -> INT_VAR','variable',1,'p_variable_int','Parser.py',96),
  ('variable -> BOOL_VAR','variable',1,'p_variable_bool','Parser.py',100),
  ('variable -> int_arr_var','variable',1,'p_variable','Parser.py',104),
  ('variable -> bool_arr_var','variable',1,'p_variable','Parser.py',105),
  ('procedure -> PROC_VAR','procedure',1,'p_procedure_simple','Parser.py',110),
  ('procedure -> proc_arr_var','procedure',1,'p_procedure','Parser.py',116),
  ('label -> LABEL','label',1,'p_label','Parser.py',126),
  ('literal -> LPAREN INT RPAREN','literal',3,'p_literal','Parser.py',132),
  ('literal -> INT','literal',1,'p_literal','Parser.py',133),
  ('literal -> TRUE','literal',1,'p_literal','Parser.py',134),
  ('literal -> FALSE','literal',1,'p_literal','Parser.py',135),
  ('var_call_id -> VAR_CALL','var_call_id',1,'p_var_call_id','Parser.py',143),
  ('arr_call_id -> ARR_CALL LBRACKET id_list RBRACKET','arr_call_id',4,'p_arr_call_id','Parser.py',148),
  ('call -> arr_call_id','call',1,'p_call','Parser.py',152),
  ('call -> var_call_id','call',1,'p_call','Parser.py',153),
  ('int_arr_var -> INT_ARR LBRACKET id_list RBRACKET','int_arr_var',4,'p_int_arr_var','Parser.py',159),
  ('bool_arr_var -> BOOL_ARR LBRACKET id_list RBRACKET','bool_arr_var',4,'p_bool_arr_var','Parser.py',163),
  ('proc_arr_var -> PROC_ARR LBRACKET id_list RBRACKET','proc_arr_var',4,'p_proc_arr_var','Parser.py',167),
  ('id_list -> id_list id','id_list',2,'p_id_list','Parser.py',171),
  ('id_list -> id','id_list',1,'p_id_list','Parser.py',172),
  ('id -> INT','id',1,'p_id_simple','Parser.py',181),
  ('id -> call','id',1,'p_id','Parser.py',185),
  ('declaration -> label','declaration',1,'p_declaration','Parser.py',191),
  ('declaration -> declaration_set','declaration',1,'p_declaration','Parser.py',192),
  ('declaration -> error','declaration',1,'p_declaration_error','Parser.py',197),
  ('declaration_set -> variable','declaration_set',1,'p_declaration_set','Parser.py',203),
  ('declaration_set -> procedure','declaration_set',1,'p_declaration_set','Parser.py',204),
  ('assignment -> declaration ASSIGN literal','assignment',3,'p_assignment','Parser.py',212),
  ('assignment -> declaration ASSIGN call','assignment',3,'p_assignment','Parser.py',213),
  ('assignment -> call ASSIGN call','assignment',3,'p_assignment','Parser.py',215),
  ('assignment -> call ASSIGN literal','assignment',3,'p_assignment','Parser.py',216),
  ('assignment -> declaration ASSIGN logics','assignment',3,'p_assignment','Parser.py',218),
  ('assignment -> declaration ASSIGN comparison','assignment',3,'p_assignment','Parser.py',219),
  ('assignment -> declaration ASSIGN identification','assignment',3,'p_assignment','Parser.py',220),
  ('assignment -> declaration ASSIGN robot','assignment',3,'p_assignment','Parser.py',221),
  ('assignment -> call ASSIGN logics','assignment',3,'p_assignment','Parser.py',223),
  ('assignment -> call ASSIGN comparison','assignment',3,'p_assignment','Parser.py',224),
  ('assignment -> call ASSIGN identification','assignment',3,'p_assignment','Parser.py',225),
  ('assignment -> call ASSIGN robot','assignment',3,'p_assignment','Parser.py',226),
  ('assignment -> call ASSIGN LBRACE NL statement_block RBRACE','assignment',6,'p_assignment','Parser.py',228),
  ('assignment -> error ASSIGN call','assignment',3,'p_assignment_error','Parser.py',236),
  ('assignment -> error ASSIGN literal','assignment',3,'p_assignment_error','Parser.py',237),
  ('assignment -> declaration ASSIGN error','assignment',3,'p_assignment_error','Parser.py',238),
  ('assignment -> call ASSIGN error','assignment',3,'p_assignment_error','Parser.py',240),
  ('assignment -> error ASSIGN logics','assignment',3,'p_assignment_error','Parser.py',242),
  ('assignment -> error ASSIGN comparison','assignment',3,'p_assignment_error','Parser.py',243),
  ('assignment -> error ASSIGN identification','assignment',3,'p_assignment_error','Parser.py',244),
  ('assignment -> error ASSIGN robot','assignment',3,'p_assignment_error','Parser.py',245),
  ('assignment -> error ASSIGN LBRACE statement_block RBRACE','assignment',5,'p_assignment_error','Parser.py',247),
  ('assignment -> call ASSIGN LBRACE error RBRACE','assignment',5,'p_assignment_error','Parser.py',248),
  ('arithmetic -> INCR','arithmetic',1,'p_arithmetic','Parser.py',260),
  ('arithmetic -> DECR','arithmetic',1,'p_arithmetic','Parser.py',261),
  ('arithmetic -> error','arithmetic',1,'p_arithmetic_error','Parser.py',269),
  ('log_type -> TRUE','log_type',1,'p_log_type','Parser.py',277),
  ('log_type -> FALSE','log_type',1,'p_log_type','Parser.py',278),
  ('log_type -> call','log_type',1,'p_log_type','Parser.py',279),
  ('logic_expr -> logic_expr DASH log_type','logic_expr',3,'p_logic_expr','Parser.py',288),
  ('logic_expr -> log_type','logic_expr',1,'p_logic_expr','Parser.py',289),
  ('logics -> NOR logic_expr','logics',2,'p_logics','Parser.py',297),
  ('logics -> NOR error','logics',2,'p_logics_error','Parser.py',302),
  ('comparison -> arithmetic EQ INT','comparison',3,'p_comparison','Parser.py',310),
  ('comparison -> arithmetic EQ var_call_id','comparison',3,'p_comparison','Parser.py',311),
  ('comparison -> var_call_id EQ var_call_id','comparison',3,'p_comparison','Parser.py',313),
  ('comparison -> var_call_id EQ INT','comparison',3,'p_comparison','Parser.py',314),
  ('comparison -> arr_call_id EQ INT','comparison',3,'p_comparison','Parser.py',315),
  ('comparison -> var_call_id EQ TRUE','comparison',3,'p_comparison','Parser.py',317),
  ('comparison -> var_call_id EQ FALSE','comparison',3,'p_comparison','Parser.py',318),
  ('comparison -> arr_call_id EQ TRUE','comparison',3,'p_comparison','Parser.py',319),
  ('comparison -> arr_call_id EQ FALSE','comparison',3,'p_comparison','Parser.py',320),
  ('comparison -> logics EQ TRUE','comparison',3,'p_comparison','Parser.py',322),
  ('comparison -> logics EQ FALSE','comparison',3,'p_comparison','Parser.py',323),
  ('comparison -> log_type EQ TRUE','comparison',3,'p_comparison','Parser.py',324),
  ('comparison -> log_type EQ FALSE','comparison',3,'p_comparison','Parser.py',325),
  ('comparison -> var_call_id EQ PASS','comparison',3,'p_comparison','Parser.py',327),
  ('comparison -> arr_call_id EQ PASS','comparison',3,'p_comparison','Parser.py',328),
  ('comparison -> literal EQ literal','comparison',3,'p_comparison','Parser.py',330),
  ('comparison -> error EQ INT','comparison',3,'p_comparison_error','Parser.py',335),
  ('comparison -> error EQ var_call_id','comparison',3,'p_comparison_error','Parser.py',336),
  ('comparison -> error EQ TRUE','comparison',3,'p_comparison_error','Parser.py',337),
  ('comparison -> error EQ FALSE','comparison',3,'p_comparison_error','Parser.py',338),
  ('comparison -> error EQ PASS','comparison',3,'p_comparison_error','Parser.py',339),
  ('comparison -> arithmetic EQ error','comparison',3,'p_comparison_error','Parser.py',341),
  ('comparison -> var_call_id EQ error','comparison',3,'p_comparison_error','Parser.py',342),
  ('comparison -> arr_call_id EQ error','comparison',3,'p_comparison_error','Parser.py',343),
  ('comparison -> logics EQ error','comparison',3,'p_comparison_error','Parser.py',344),
  ('comparison -> log_type EQ error','comparison',3,'p_comparison_error','Parser.py',345),
  ('comparison -> arithmetic EQ error conditionals','comparison',4,'p_comparison_error','Parser.py',347),
  ('comparison -> logics EQ error conditionals','comparison',4,'p_comparison_error','Parser.py',348),
  ('cycle -> LPAREN logics RPAREN LBRACE NL statement_block RBRACE','cycle',7,'p_cycle','Parser.py',356),
  ('cycle -> LPAREN logic_expr RPAREN LBRACE NL statement_block RBRACE','cycle',7,'p_cycle','Parser.py',357),
  ('cycle -> LPAREN error RPAREN LBRACE NL statement_block RBRACE','cycle',7,'p_cycle_error','Parser.py',362),
  ('cycle -> LPAREN logics RPAREN LBRACE NL error RBRACE','cycle',7,'p_cycle_error','Parser.py',363),
  ('cycle -> LPAREN logic_expr RPAREN LBRACE NL error RBRACE','cycle',7,'p_cycle_error','Parser.py',364),
  ('conditionals -> LBRACKET logics RBRACKET GOTO var_call_id','conditionals',5,'p_conditionals','Parser.py',373),
  ('conditionals -> LBRACKET logic_expr RBRACKET GOTO var_call_id','conditionals',5,'p_conditionals','Parser.py',374),
  ('conditionals -> LBRACKET logics RBRACKET var_call_id','conditionals',4,'p_conditionals','Parser.py',375),
  ('conditionals -> LBRACKET logic_expr RBRACKET var_call_id','conditionals',4,'p_conditionals','Parser.py',376),
  ('conditionals -> GOTO var_call_id','conditionals',2,'p_conditionals','Parser.py',377),
  ('conditionals -> var_call_id','conditionals',1,'p_conditionals','Parser.py',378),
  ('conditionals -> LBRACKET error RBRACKET GOTO var_call_id','conditionals',5,'p_conditionals_error','Parser.py',393),
  ('conditionals -> LBRACKET error RBRACKET var_call_id','conditionals',4,'p_conditionals_error','Parser.py',394),
  ('conditionals -> LBRACKET logics RBRACKET GOTO error','conditionals',5,'p_conditionals_error','Parser.py',396),
  ('conditionals -> LBRACKET logic_expr RBRACKET GOTO error','conditionals',5,'p_conditionals_error','Parser.py',397),
  ('conditionals -> LBRACKET logics RBRACKET error','conditionals',4,'p_conditionals_error','Parser.py',398),
  ('conditionals -> LBRACKET logic_expr RBRACKET error','conditionals',4,'p_conditionals_error','Parser.py',399),
  ('conditionals -> GOTO error','conditionals',2,'p_conditionals_error','Parser.py',401),
  ('conditionals -> error','conditionals',1,'p_conditionals_error','Parser.py',402),
  ('pass -> PASS','pass',1,'p_pass','Parser.py',417),
  ('identification -> call LINK var_call_id','identification',3,'p_identification','Parser.py',423),
  ('identification -> call LINK_BREAK var_call_id','identification',3,'p_identification','Parser.py',424),
  ('identification -> error LINK var_call_id','identification',3,'p_identification_error','Parser.py',429),
  ('identification -> error LINK_BREAK var_call_id','identification',3,'p_identification_error','Parser.py',430),
  ('identification -> call LINK error','identification',3,'p_identification_error','Parser.py',432),
  ('identification -> call LINK_BREAK error','identification',3,'p_identification_error','Parser.py',433),
  ('identification -> identification error','identification',2,'p_identification_error','Parser.py',435),
  ('identification -> literal LINK var_call_id','identification',3,'p_identification_error','Parser.py',436),
  ('identification -> literal LINK_BREAK var_call_id','identification',3,'p_identification_error','Parser.py',437),
  ('robot -> FORWARD','robot',1,'p_robot','Parser.py',449),
  ('robot -> BACK','robot',1,'p_robot','Parser.py',450),
  ('robot -> RIGHT','robot',1,'p_robot','Parser.py',451),
  ('robot -> LEFT','robot',1,'p_robot','Parser.py',452),
  ('robot -> TP','robot',1,'p_robot','Parser.py',453),
  ('empty -> NL','empty',1,'p_empty','Parser.py',458),
]
