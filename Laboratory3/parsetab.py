
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ARR_CALL ASSIGN BACK BOOL_ARR BOOL_VAR COMMA DECR EQ FALSE FORWARD GOTO INCR INT INT_ARR INT_VAR LABEL LBRACE LBRACKET LEFT LINK LINK_BREAK LPAREN NL NOR PASS PROC_ARR PROC_VAR RBRACE RBRACKET RIGHT RPAREN TP TRUE VAR_CALLprogram : statement_list NL\n                   | statement_list\n        statement_list : statement_list statement\n                          | statement\n                          | NL\n        statement : declaration NL\n                     | assignment NL\n                     | arithmetic NL\n                     | logics NL\n                     | comparison NL\n                     | cycle NL\n                     | conditionals NL\n                     | pass NL\n                     | identification NL\n                     | robot NL\n        statement : errorvariable : INT_VAR\n                    | BOOL_VAR\n                    | int_arr_var\n                    | bool_arr_var\n        procedure : PROC_VAR\n                    | proc_arr_var\n        label : LABELliteral : INT\n                | TRUE\n                | FALSE\n        var_call_id : VAR_CALLint_arr_var : INT_ARR id_listbool_arr_var : BOOL_ARR id_listproc_arr_var : PROC_ARR id_listid_list : id_list COMMA id\n                   | id\n        id : var_call_id\n              | INT_VAR\n              | arr_call_id\n        arr_call_id : ARR_CALL id_listcall : arr_call_id\n                | var_call_id\n        declaration : label\n                       | declaration_set\n        declaration_set : variable\n                           | procedure\n        assignment : declaration_set ASSIGN call\n                      | declaration_set ASSIGN declaration_set\n                      | declaration_set ASSIGN literal\n                      | var_call_id ASSIGN call\n                      | var_call_id ASSIGN LBRACE statement_list RBRACE\n                      | var_call_id ASSIGN variable\n                      | var_call_id ASSIGN literal\n                      | BOOL_VAR ASSIGN robot\n                      | call ASSIGN robot\n                      | variable ASSIGN variable\n                      | variable ASSIGN literal\n        arithmetic : INCR\n                      | DECR\n        log_type : TRUE\n                    | FALSE\n                    | BOOL_VAR\n                    | call\n        logic_expr : logic_expr COMMA log_type\n                      | log_type\n        logics : NOR logic_expr\n        comparison : arithmetic EQ INT\n                      | logics EQ TRUE\n                      | logics EQ FALSE\n                      | logic_expr EQ TRUE\n                      | logic_expr EQ FALSE\n                      | call EQ PASS\n        cycle : LPAREN logics RPAREN LBRACE statement_list RBRACE\n                 | LPAREN logic_expr RPAREN LBRACE statement_list RBRACE\n        conditionals : LBRACKET logics RBRACKET GOTO var_call_id\n                        | LBRACKET logic_expr RBRACKET GOTO var_call_id\n                        | LBRACKET logics RBRACKET var_call_id\n                        | LBRACKET logic_expr RBRACKET var_call_id\n                        | GOTO var_call_id\n                        | var_call_id\n        pass : PASSidentification : variable LINK var_call_id\n                          | procedure LINK var_call_id\n                          | variable LINK_BREAK var_call_id\n                          | procedure LINK_BREAK var_call_id\n        robot : FORWARD\n                 | BACK\n                 | RIGHT\n                 | LEFT\n                 | TP\n        '
    
_lr_action_items = {'NL':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,19,20,21,22,23,26,27,28,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,52,53,54,55,57,59,60,61,62,63,64,73,74,75,76,83,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,124,125,128,129,131,133,134,135,138,139,140,141,],[3,51,-5,-4,53,54,55,57,59,60,61,62,63,64,-16,-39,-40,-76,-41,-18,-54,-55,-56,-57,-77,-42,-82,-83,-84,-85,-86,-23,-27,-37,-17,-19,-20,-61,-21,-22,-3,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-62,-58,-59,-38,-75,-36,-32,-33,-34,-35,-28,-29,-30,-63,-64,-65,-44,-43,-45,-41,-42,-24,-25,-26,-18,-51,-68,-46,3,-48,-49,-52,-53,-78,-80,-50,-66,-67,-60,-79,-81,3,3,-73,-74,-31,-47,-71,-72,-69,-70,]),'error':([0,2,3,4,15,52,53,54,55,57,59,60,61,62,63,64,109,127,128,129,136,137,],[15,15,-5,-4,-16,-3,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,15,15,15,15,15,15,]),'BOOL_VAR':([0,2,3,4,15,24,29,30,52,53,54,55,57,59,60,61,62,63,64,65,68,69,78,109,127,128,129,136,137,],[21,21,-5,-4,-16,74,74,74,-3,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,105,105,105,74,21,21,21,21,21,21,]),'INCR':([0,2,3,4,15,52,53,54,55,57,59,60,61,62,63,64,109,127,128,129,136,137,],[22,22,-5,-4,-16,-3,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,22,22,22,22,22,22,]),'DECR':([0,2,3,4,15,52,53,54,55,57,59,60,61,62,63,64,109,127,128,129,136,137,],[23,23,-5,-4,-16,-3,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,23,23,23,23,23,23,]),'NOR':([0,2,3,4,15,29,30,52,53,54,55,57,59,60,61,62,63,64,109,127,128,129,136,137,],[24,24,-5,-4,-16,24,24,-3,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,24,24,24,24,24,24,]),'LPAREN':([0,2,3,4,15,52,53,54,55,57,59,60,61,62,63,64,109,127,128,129,136,137,],[29,29,-5,-4,-16,-3,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,29,29,29,29,29,29,]),'LBRACKET':([0,2,3,4,15,52,53,54,55,57,59,60,61,62,63,64,109,127,128,129,136,137,],[30,30,-5,-4,-16,-3,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,30,30,30,30,30,30,]),'GOTO':([0,2,3,4,15,52,53,54,55,57,59,60,61,62,63,64,109,122,123,127,128,129,136,137,],[31,31,-5,-4,-16,-3,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,31,130,132,31,31,31,31,31,]),'PASS':([0,2,3,4,15,52,53,54,55,57,59,60,61,62,63,64,67,109,127,128,129,136,137,],[28,28,-5,-4,-16,-3,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,107,28,28,28,28,28,28,]),'FORWARD':([0,2,3,4,15,52,53,54,55,57,59,60,61,62,63,64,66,72,109,127,128,129,136,137,],[33,33,-5,-4,-16,-3,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,33,33,33,33,33,33,33,33,]),'BACK':([0,2,3,4,15,52,53,54,55,57,59,60,61,62,63,64,66,72,109,127,128,129,136,137,],[34,34,-5,-4,-16,-3,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,34,34,34,34,34,34,34,34,]),'RIGHT':([0,2,3,4,15,52,53,54,55,57,59,60,61,62,63,64,66,72,109,127,128,129,136,137,],[35,35,-5,-4,-16,-3,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,35,35,35,35,35,35,35,35,]),'LEFT':([0,2,3,4,15,52,53,54,55,57,59,60,61,62,63,64,66,72,109,127,128,129,136,137,],[36,36,-5,-4,-16,-3,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,36,36,36,36,36,36,36,36,]),'TP':([0,2,3,4,15,52,53,54,55,57,59,60,61,62,63,64,66,72,109,127,128,129,136,137,],[37,37,-5,-4,-16,-3,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,37,37,37,37,37,37,37,37,]),'LABEL':([0,2,3,4,15,52,53,54,55,57,59,60,61,62,63,64,109,127,128,129,136,137,],[38,38,-5,-4,-16,-3,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,38,38,38,38,38,38,]),'VAR_CALL':([0,2,3,4,15,24,29,30,31,47,48,49,50,52,53,54,55,57,59,60,61,62,63,64,65,68,70,71,78,84,85,109,122,123,126,127,128,129,130,132,136,137,],[39,39,-5,-4,-16,39,39,39,39,39,39,39,39,-3,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,]),'INT_VAR':([0,2,3,4,15,47,48,49,50,52,53,54,55,57,59,60,61,62,63,64,65,68,69,109,126,127,128,129,136,137,],[41,41,-5,-4,-16,89,89,89,89,-3,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,41,41,41,41,89,41,41,41,41,41,]),'PROC_VAR':([0,2,3,4,15,52,53,54,55,57,59,60,61,62,63,64,65,109,127,128,129,136,137,],[45,45,-5,-4,-16,-3,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,45,45,45,45,45,45,45,]),'ARR_CALL':([0,2,3,4,15,24,29,30,47,48,49,50,52,53,54,55,57,59,60,61,62,63,64,65,68,78,109,126,127,128,129,136,137,],[47,47,-5,-4,-16,47,47,47,47,47,47,47,-3,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,47,47,47,47,47,47,47,47,47,47,]),'INT_ARR':([0,2,3,4,15,52,53,54,55,57,59,60,61,62,63,64,65,68,69,109,127,128,129,136,137,],[48,48,-5,-4,-16,-3,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,48,48,48,48,48,48,48,48,48,]),'BOOL_ARR':([0,2,3,4,15,52,53,54,55,57,59,60,61,62,63,64,65,68,69,109,127,128,129,136,137,],[49,49,-5,-4,-16,-3,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,49,49,49,49,49,49,49,49,49,]),'TRUE':([0,2,3,4,15,24,29,30,52,53,54,55,57,58,59,60,61,62,63,64,65,68,69,77,78,109,127,128,129,136,137,],[26,26,-5,-4,-16,26,26,26,-3,-6,-7,-8,-9,95,-10,-11,-12,-13,-14,-15,103,103,103,117,26,26,26,26,26,26,26,]),'FALSE':([0,2,3,4,15,24,29,30,52,53,54,55,57,58,59,60,61,62,63,64,65,68,69,77,78,109,127,128,129,136,137,],[27,27,-5,-4,-16,27,27,27,-3,-6,-7,-8,-9,96,-10,-11,-12,-13,-14,-15,104,104,104,118,27,27,27,27,27,27,27,]),'PROC_ARR':([0,2,3,4,15,52,53,54,55,57,59,60,61,62,63,64,65,109,127,128,129,136,137,],[50,50,-5,-4,-16,-3,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,50,50,50,50,50,50,50,]),'$end':([1,2,3,4,15,51,52,53,54,55,57,59,60,61,62,63,64,],[0,-2,-5,-4,-16,-1,-3,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,]),'RBRACE':([3,4,15,52,53,54,55,57,59,60,61,62,63,64,127,136,137,],[-5,-4,-16,-3,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,135,140,141,]),'EQ':([7,8,18,19,21,22,23,25,26,27,39,40,44,73,74,75,76,86,87,88,89,90,119,134,],[56,58,67,-38,-58,-54,-55,77,-56,-57,-27,-37,-61,-62,-58,-59,-38,-36,-32,-33,-34,-35,-60,-31,]),'ASSIGN':([17,18,19,20,21,32,39,40,41,42,43,45,46,86,87,88,89,90,91,92,93,134,],[65,66,68,69,72,-42,-27,-37,-17,-19,-20,-21,-22,-36,-32,-33,-34,-35,-28,-29,-30,-31,]),'COMMA':([18,19,21,25,26,27,39,40,44,73,74,75,76,80,82,86,87,88,89,90,91,92,93,119,134,],[-59,-38,-58,78,-56,-57,-27,-37,-61,78,-58,-59,-38,78,78,126,-32,-33,-34,-35,126,126,126,-60,-31,]),'LINK':([20,21,32,39,41,42,43,45,46,86,87,88,89,90,91,92,93,134,],[70,-18,84,-27,-17,-19,-20,-21,-22,-36,-32,-33,-34,-35,-28,-29,-30,-31,]),'LINK_BREAK':([20,21,32,39,41,42,43,45,46,86,87,88,89,90,91,92,93,134,],[71,-18,85,-27,-17,-19,-20,-21,-22,-36,-32,-33,-34,-35,-28,-29,-30,-31,]),'RPAREN':([26,27,39,40,44,73,74,75,76,79,80,86,87,88,89,90,119,134,],[-56,-57,-27,-37,-61,-62,-58,-59,-38,120,121,-36,-32,-33,-34,-35,-60,-31,]),'RBRACKET':([26,27,39,40,44,73,74,75,76,81,82,86,87,88,89,90,119,134,],[-56,-57,-27,-37,-61,-62,-58,-59,-38,122,123,-36,-32,-33,-34,-35,-60,-31,]),'INT':([56,65,68,69,],[94,102,102,102,]),'LBRACE':([68,120,121,],[109,128,129,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statement_list':([0,109,128,129,],[2,127,136,137,]),'statement':([0,2,109,127,128,129,136,137,],[4,52,4,52,4,4,52,52,]),'declaration':([0,2,109,127,128,129,136,137,],[5,5,5,5,5,5,5,5,]),'assignment':([0,2,109,127,128,129,136,137,],[6,6,6,6,6,6,6,6,]),'arithmetic':([0,2,109,127,128,129,136,137,],[7,7,7,7,7,7,7,7,]),'logics':([0,2,29,30,109,127,128,129,136,137,],[8,8,79,81,8,8,8,8,8,8,]),'comparison':([0,2,109,127,128,129,136,137,],[9,9,9,9,9,9,9,9,]),'cycle':([0,2,109,127,128,129,136,137,],[10,10,10,10,10,10,10,10,]),'conditionals':([0,2,109,127,128,129,136,137,],[11,11,11,11,11,11,11,11,]),'pass':([0,2,109,127,128,129,136,137,],[12,12,12,12,12,12,12,12,]),'identification':([0,2,109,127,128,129,136,137,],[13,13,13,13,13,13,13,13,]),'robot':([0,2,66,72,109,127,128,129,136,137,],[14,14,106,116,14,14,14,14,14,14,]),'label':([0,2,109,127,128,129,136,137,],[16,16,16,16,16,16,16,16,]),'declaration_set':([0,2,65,109,127,128,129,136,137,],[17,17,97,17,17,17,17,17,17,]),'call':([0,2,24,29,30,65,68,78,109,127,128,129,136,137,],[18,18,75,75,75,98,108,75,18,18,18,18,18,18,]),'var_call_id':([0,2,24,29,30,31,47,48,49,50,65,68,70,71,78,84,85,109,122,123,126,127,128,129,130,132,136,137,],[19,19,76,76,76,83,88,88,88,88,76,76,114,115,76,124,125,19,131,133,88,19,19,19,138,139,19,19,]),'variable':([0,2,65,68,69,109,127,128,129,136,137,],[20,20,100,110,112,20,20,20,20,20,20,]),'logic_expr':([0,2,24,29,30,109,127,128,129,136,137,],[25,25,73,80,82,25,25,25,25,25,25,]),'procedure':([0,2,65,109,127,128,129,136,137,],[32,32,101,32,32,32,32,32,32,]),'arr_call_id':([0,2,24,29,30,47,48,49,50,65,68,78,109,126,127,128,129,136,137,],[40,40,40,40,40,90,90,90,90,40,40,40,40,90,40,40,40,40,40,]),'int_arr_var':([0,2,65,68,69,109,127,128,129,136,137,],[42,42,42,42,42,42,42,42,42,42,42,]),'bool_arr_var':([0,2,65,68,69,109,127,128,129,136,137,],[43,43,43,43,43,43,43,43,43,43,43,]),'log_type':([0,2,24,29,30,78,109,127,128,129,136,137,],[44,44,44,44,44,119,44,44,44,44,44,44,]),'proc_arr_var':([0,2,65,109,127,128,129,136,137,],[46,46,46,46,46,46,46,46,46,]),'id_list':([47,48,49,50,],[86,91,92,93,]),'id':([47,48,49,50,126,],[87,87,87,87,134,]),'literal':([65,68,69,],[99,111,113,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list NL','program',2,'p_program','Parser.py',32),
  ('program -> statement_list','program',1,'p_program','Parser.py',33),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','Parser.py',37),
  ('statement_list -> statement','statement_list',1,'p_statement_list','Parser.py',38),
  ('statement_list -> NL','statement_list',1,'p_statement_list','Parser.py',39),
  ('statement -> declaration NL','statement',2,'p_statement','Parser.py',43),
  ('statement -> assignment NL','statement',2,'p_statement','Parser.py',44),
  ('statement -> arithmetic NL','statement',2,'p_statement','Parser.py',45),
  ('statement -> logics NL','statement',2,'p_statement','Parser.py',46),
  ('statement -> comparison NL','statement',2,'p_statement','Parser.py',47),
  ('statement -> cycle NL','statement',2,'p_statement','Parser.py',48),
  ('statement -> conditionals NL','statement',2,'p_statement','Parser.py',49),
  ('statement -> pass NL','statement',2,'p_statement','Parser.py',50),
  ('statement -> identification NL','statement',2,'p_statement','Parser.py',51),
  ('statement -> robot NL','statement',2,'p_statement','Parser.py',52),
  ('statement -> error','statement',1,'p_statement_error','Parser.py',56),
  ('variable -> INT_VAR','variable',1,'p_variable','Parser.py',62),
  ('variable -> BOOL_VAR','variable',1,'p_variable','Parser.py',63),
  ('variable -> int_arr_var','variable',1,'p_variable','Parser.py',64),
  ('variable -> bool_arr_var','variable',1,'p_variable','Parser.py',65),
  ('procedure -> PROC_VAR','procedure',1,'p_procedure','Parser.py',69),
  ('procedure -> proc_arr_var','procedure',1,'p_procedure','Parser.py',70),
  ('label -> LABEL','label',1,'p_label','Parser.py',74),
  ('literal -> INT','literal',1,'p_literal','Parser.py',77),
  ('literal -> TRUE','literal',1,'p_literal','Parser.py',78),
  ('literal -> FALSE','literal',1,'p_literal','Parser.py',79),
  ('var_call_id -> VAR_CALL','var_call_id',1,'p_var_call_id','Parser.py',83),
  ('int_arr_var -> INT_ARR id_list','int_arr_var',2,'p_int_arr_var','Parser.py',87),
  ('bool_arr_var -> BOOL_ARR id_list','bool_arr_var',2,'p_bool_arr_var','Parser.py',90),
  ('proc_arr_var -> PROC_ARR id_list','proc_arr_var',2,'p_proc_arr_var','Parser.py',93),
  ('id_list -> id_list COMMA id','id_list',3,'p_id_list','Parser.py',96),
  ('id_list -> id','id_list',1,'p_id_list','Parser.py',97),
  ('id -> var_call_id','id',1,'p_id','Parser.py',101),
  ('id -> INT_VAR','id',1,'p_id','Parser.py',102),
  ('id -> arr_call_id','id',1,'p_id','Parser.py',103),
  ('arr_call_id -> ARR_CALL id_list','arr_call_id',2,'p_arr_call_id','Parser.py',107),
  ('call -> arr_call_id','call',1,'p_call','Parser.py',110),
  ('call -> var_call_id','call',1,'p_call','Parser.py',111),
  ('declaration -> label','declaration',1,'p_declaration','Parser.py',118),
  ('declaration -> declaration_set','declaration',1,'p_declaration','Parser.py',119),
  ('declaration_set -> variable','declaration_set',1,'p_declaration_set','Parser.py',123),
  ('declaration_set -> procedure','declaration_set',1,'p_declaration_set','Parser.py',124),
  ('assignment -> declaration_set ASSIGN call','assignment',3,'p_assignment','Parser.py',130),
  ('assignment -> declaration_set ASSIGN declaration_set','assignment',3,'p_assignment','Parser.py',131),
  ('assignment -> declaration_set ASSIGN literal','assignment',3,'p_assignment','Parser.py',132),
  ('assignment -> var_call_id ASSIGN call','assignment',3,'p_assignment','Parser.py',133),
  ('assignment -> var_call_id ASSIGN LBRACE statement_list RBRACE','assignment',5,'p_assignment','Parser.py',134),
  ('assignment -> var_call_id ASSIGN variable','assignment',3,'p_assignment','Parser.py',135),
  ('assignment -> var_call_id ASSIGN literal','assignment',3,'p_assignment','Parser.py',136),
  ('assignment -> BOOL_VAR ASSIGN robot','assignment',3,'p_assignment','Parser.py',137),
  ('assignment -> call ASSIGN robot','assignment',3,'p_assignment','Parser.py',138),
  ('assignment -> variable ASSIGN variable','assignment',3,'p_assignment','Parser.py',139),
  ('assignment -> variable ASSIGN literal','assignment',3,'p_assignment','Parser.py',140),
  ('arithmetic -> INCR','arithmetic',1,'p_arithmetic','Parser.py',145),
  ('arithmetic -> DECR','arithmetic',1,'p_arithmetic','Parser.py',146),
  ('log_type -> TRUE','log_type',1,'p_log_type','Parser.py',152),
  ('log_type -> FALSE','log_type',1,'p_log_type','Parser.py',153),
  ('log_type -> BOOL_VAR','log_type',1,'p_log_type','Parser.py',154),
  ('log_type -> call','log_type',1,'p_log_type','Parser.py',155),
  ('logic_expr -> logic_expr COMMA log_type','logic_expr',3,'p_logic_expr','Parser.py',159),
  ('logic_expr -> log_type','logic_expr',1,'p_logic_expr','Parser.py',160),
  ('logics -> NOR logic_expr','logics',2,'p_logics','Parser.py',164),
  ('comparison -> arithmetic EQ INT','comparison',3,'p_comparison','Parser.py',170),
  ('comparison -> logics EQ TRUE','comparison',3,'p_comparison','Parser.py',171),
  ('comparison -> logics EQ FALSE','comparison',3,'p_comparison','Parser.py',172),
  ('comparison -> logic_expr EQ TRUE','comparison',3,'p_comparison','Parser.py',173),
  ('comparison -> logic_expr EQ FALSE','comparison',3,'p_comparison','Parser.py',174),
  ('comparison -> call EQ PASS','comparison',3,'p_comparison','Parser.py',175),
  ('cycle -> LPAREN logics RPAREN LBRACE statement_list RBRACE','cycle',6,'p_cycle','Parser.py',180),
  ('cycle -> LPAREN logic_expr RPAREN LBRACE statement_list RBRACE','cycle',6,'p_cycle','Parser.py',181),
  ('conditionals -> LBRACKET logics RBRACKET GOTO var_call_id','conditionals',5,'p_conditionals','Parser.py',187),
  ('conditionals -> LBRACKET logic_expr RBRACKET GOTO var_call_id','conditionals',5,'p_conditionals','Parser.py',188),
  ('conditionals -> LBRACKET logics RBRACKET var_call_id','conditionals',4,'p_conditionals','Parser.py',189),
  ('conditionals -> LBRACKET logic_expr RBRACKET var_call_id','conditionals',4,'p_conditionals','Parser.py',190),
  ('conditionals -> GOTO var_call_id','conditionals',2,'p_conditionals','Parser.py',191),
  ('conditionals -> var_call_id','conditionals',1,'p_conditionals','Parser.py',192),
  ('pass -> PASS','pass',1,'p_pass','Parser.py',197),
  ('identification -> variable LINK var_call_id','identification',3,'p_identification','Parser.py',202),
  ('identification -> procedure LINK var_call_id','identification',3,'p_identification','Parser.py',203),
  ('identification -> variable LINK_BREAK var_call_id','identification',3,'p_identification','Parser.py',204),
  ('identification -> procedure LINK_BREAK var_call_id','identification',3,'p_identification','Parser.py',205),
  ('robot -> FORWARD','robot',1,'p_robot','Parser.py',210),
  ('robot -> BACK','robot',1,'p_robot','Parser.py',211),
  ('robot -> RIGHT','robot',1,'p_robot','Parser.py',212),
  ('robot -> LEFT','robot',1,'p_robot','Parser.py',213),
  ('robot -> TP','robot',1,'p_robot','Parser.py',214),
]
